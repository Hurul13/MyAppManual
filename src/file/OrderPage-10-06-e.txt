import {
  // Text,
  View,
  Image,
  // ScrollView,
  TouchableOpacity,
  FlatList,
  RefreshControl,
} from 'react-native';
import { Button, Center, Text, HStack } from 'native-base';

import React, { useEffect, useState } from 'react';
import styles from './Styles';
import IconMaterial from 'react-native-vector-icons/MaterialCommunityIcons';
import material from '../../utils/material';
import { Buttone } from '../../components';
import {
  responsiveHeight,
} from 'react-native-responsive-dimensions';
import {
  WARNA_DISABLE,
  WARNA_UTAMA,
  WARNA_SEKUNDER,
} from '../../utils/constant';
import { ScrollView } from 'react-native-virtualized-view';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { url } from '../../utils/url';

const Checkout3 = ({ navigation, route }) => {
  const { address } = route.params;
  const { id } = route.params;
  const [totalPrice, setTotalPrice] = useState(0);
  const [refreshing, setRefreshing] = useState(false);
  const [userAddress, setUserAddress] = useState(null);
  const [cartItems, setCartItems] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const user_id = await AsyncStorage.getItem('user_id');
        const token = await AsyncStorage.getItem('token');

        // Fetch user address
        const responseAddress = await fetch(
          `${url}user-address/view-address-id?id=${id}`,
          {
            headers: {
              Authorization: `Bearer ${token}`,
            },
          }
        );
        const dataAddress = await responseAddress.json();
        if (responseAddress.ok) {
          setUserAddress(dataAddress.data);
        } else {
          console.log('Error fetching user address:', dataAddress);
        }

        // Fetch cart items
        const responseCart = await fetch(`${url}supplier-barang/list-keranjang`, {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });
        const dataCart = await responseCart.json();
        if (responseCart.ok) {
          setCartItems(dataCart.data);
          calculateTotalPrice(dataCart.data);
        } else {
          console.log('Error fetching cart items:', dataCart);
        }
      } catch (error) {
        console.error('Error fetching data:', error);
      }
    };

    fetchData();
  }, []);

  const calculateTotalPrice = (cartItems) => {
    let totalPrice = 0;
    cartItems.forEach((item) => {
      const { jumlah, harga_satuan } = item;
      totalPrice += jumlah * harga_satuan;
    });
    setTotalPrice(totalPrice);
  };

  const createOrder = async () => {
    try {
      const user_id = await AsyncStorage.getItem('user_id');
      const token = await AsyncStorage.getItem('token');

      const response = await fetch(
        `${url}order-product/create-order?user_id=${user_id}`,
        {
          method: 'POST',
          headers: {
            Authorization: `Bearer ${token}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            user_address_id: userAddress.id,
            items: cartItems.map((item) => ({
              supplier_barang_id: item.supplier_barang_id,
              jumlah: item.jumlah,
              harga_satuan: item.harga_satuan,
              subtotal: item.jumlah * item.harga_satuan,
            })),
          }),
        }
      );
      const data = await response.json();

      if (response.ok) {
        console.log('Order created successfully:', data);
        // Clear the cart items after successful order creation
        setCartItems([]);
        setTotalPrice(0);
      } else {
        console.log('Error creating order:', data);
      }
    } catch (error) {
      console.error('Error creating order:', error);
    }
  };

  const onRefresh = () => {
    setRefreshing(true);
    fetchData();
    setRefreshing(false);
  };

  const renderCart = ({ item }) => {
    return (
      <View style={[styles.card, styles.elevation]}>
        <View style={styles.spaceImg}>
          <Image
            source={{ uri: item.gambar }}
            style={styles.img}
          />
        </View>
        <View style={styles.space1}>
          <View style={styles.textContainer}>
            <Text isTruncated style={styles.nama}>
              {item.nama_barang}
            </Text>
            <Text style={styles.harga}>Rp {item.harga_satuan}</Text>
            <Text style={styles.quantity}>Quantity: {item.jumlah}</Text>
          </View>
        </View>
      </View>
    );
  };

  return (
    <ScrollView
      style={styles.all}
      refreshControl={
        <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
      }>
      <View style={styles.container}>
        <View style={styles.header}>
          <IconMaterial
            name="arrow-left"
            size={26}
            style={styles.iconBack}
            onPress={navigation.goBack}
          />
          <Text style={styles.judulBar}>Checkout</Text>
        </View>
        <View style={styles.box}>
          <View style={{ paddingTop: responsiveHeight(2) }}>
            <View style={styles.space2}>
              <Text style={styles.text3}>Alamat Pengiriman</Text>
              <TouchableOpacity onPress={() => navigation.navigate('TambahAlamat')}>
                <Text style={styles.text4}>Ubah</Text>
              </TouchableOpacity>
            </View>
            <View style={styles.space3}>
              {userAddress && (
                <View style={styles.space4}>
                  <Text style={styles.text5}>{userAddress.nama_penerima}</Text>
                  <Text style={styles.text6}>{userAddress.nomor_penerima}</Text>
                </View>
              )}
              <Text style={styles.text7}>{userAddress?.alamat_penerima}</Text>
              <Text style={styles.text7}>
                {userAddress?.provinsi_id}, {userAddress?.kota_id}, {userAddress?.kecamatan_id}, {userAddress?.desa_id},{' '}
                {userAddress?.kode_pos}
              </Text>
            </View>
          </View>

          {/* <View style={[styles.card, styles.elevation]}> */}
          <FlatList
            showsVerticalScrollIndicator={false}
            style={{ marginTop: responsiveHeight(3) }}
            data={cartItems}
            keyExtractor={(item) => item.id.toString()}
            renderItem={renderCart}
          />
          {/* </View> */}

          <View style={{ marginTop: responsiveHeight(2) }}>
            <View style={styles.space2}>
              <Text style={styles.text3}>Total Pembayaran</Text>
            </View>
            <View style={styles.space7}>
              <View style={styles.space6}>
                <Text style={styles.text10}>Total Pembayaran</Text>
                <Text style={styles.text11}>Rp. {totalPrice}</Text>
              </View>
            </View>
            <TouchableOpacity style={styles.bottomPay}>
              <Button
                onPress={createOrder}
                bg={WARNA_UTAMA}
                color={WARNA_SEKUNDER}
                mt={5}
                mx={responsiveHeight(3)}>
                BAYAR
              </Button>
            </TouchableOpacity>
          </View>
        </View>
      </View>
    </ScrollView>
  );
};

export default Checkout3;
