import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, Image } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { url } from '../../utils/url';
import { WARNA_BLACK, WARNA_WHITE } from '../../utils/constant';
import IconMaterial from 'react-native-vector-icons/MaterialCommunityIcons';

const HistoryOrder = ({ navigation }) => {
  const [orders, setOrders] = useState([]);
  const [filter, setFilter] = useState('');

  useEffect(() => {
    getOrdersByInvoice();
  }, []);

  const getOrdersByInvoice = async () => {
    try {
      const token = await AsyncStorage.getItem('token');
      const user_id = await AsyncStorage.getItem('user_id');
      const response = await fetch(
        `${url}invoice/view-order-by-user-id?user_id=${user_id}`,
        {
          method: 'GET',
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      const data = await response.json();
      setOrders(data.data.orders);
      console.log('data:', data.data);
    } catch (error) {
      console.log(error);
    }
  };

  const handleFilter = (filterValue) => {
    setFilter(filterValue);
  };

  const filteredOrders = orders.filter((order) => {
    if (filter === 'unpaid') {
      return order.invoice.payment_id === 1;
    } else if (filter === 'paid') {
      return order.invoice.payment_id === 2;
    } else if (filter === 'cancel') {
      return order.order_product.status_pesanan === 1;
    }
    return true;
  });

  const getOrderStatusColor = (order) => {
    if (order.invoice.payment_id === 1) {
      return 'yellow';
    } else if (order.invoice.payment_id === 2) {
      return 'green';
    } else if (order.order_product.status_pesanan === 1) {
      return 'red';
    }
    return 'black';
  };

  const handleOrderPress = (order) => {
    navigation.navigate('HistoryOrderDetail', { invoice_id: order.invoice.invoice_id });
  };

  return (
    <View style={styles.container}>
      <View style={styles.filterContainer}>
        <TouchableOpacity
          style={[styles.filterButton, filter === 'unpaid' && styles.activeFilterButton]}
          onPress={() => handleFilter('unpaid')}
        >
          <Text style={styles.filterButtonText}>Unpaid Orders</Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[styles.filterButton, filter === 'paid' && styles.activeFilterButton]}
          onPress={() => handleFilter('paid')}
        >
          <Text style={styles.filterButtonText}>Paid Orders</Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[styles.filterButton, filter === 'cancel' && styles.activeFilterButton]}
          onPress={() => handleFilter('cancel')}
        >
          <Text style={styles.filterButtonText}>Cancel Orders</Text>
        </TouchableOpacity>
      </View>
      {filteredOrders.map((order, index) => (
        <TouchableOpacity
          key={index}
          style={[styles.orderContainer, { borderColor: WARNA_WHITE }]}
          onPress={() => handleOrderPress(order)}
        >
          {/* Render the order details here */}
          <Text style={{ color: getOrderStatusColor(order) }}>{order.invoice.invoice_code}</Text>
          <Text style={{ color: getOrderStatusColor(order) }}>
            payment_id order: {order.invoice.payment_id}
          </Text>
          <Text style={{ color: getOrderStatusColor(order) }}>
            status order: {order.invoice.status}
          </Text>
          <Text style={{ color: getOrderStatusColor(order) }}>
            Subtotal: {order.order_product.subtotal}
          </Text>
          <Text style={{ color: getOrderStatusColor(order) }}>
            Total: {order.order_product.subtotal * order.order_product.jumlah}
          </Text>
          <Text style={{ color: getOrderStatusColor(order) }}>
            Supplier: {order.supplier_barang.nama_barang}
          </Text>
          <Image
            source={{ uri: order.supplier_barang.gambar }}
            style={{ width: 50, height: 50 }}
          />

          {/* Add more order details as needed */}
          <IconMaterial
            name="eye"
            size={24}
            color={getOrderStatusColor(order)}
            onPress={() => handleOrderPress(order)}
          />
        </TouchableOpacity>
      ))}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 10,
    backgroundColor: WARNA_BLACK,
  },
  filterContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 10,
  },
  filterButton: {
    borderWidth: 1,
    borderColor: WARNA_WHITE,
    padding: 10,
    flex: 1,
    alignItems: 'center',
  },
  activeFilterButton: {
    backgroundColor: WARNA_WHITE,
  },
  filterButtonText: {
    color: WARNA_WHITE,
  },
  orderContainer: {
    borderWidth: 1,
    padding: 10,
    marginBottom: 10,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
});

export default HistoryOrder;
