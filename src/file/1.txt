// 

import React, {useState, useEffect} from 'react';
import {
  View,
  Text,
  Image,
  StyleSheet,
  FlatList,
  ScrollView,
  TouchableOpacity,
  TextInput,
} from 'react-native';
import {
  WARNA_DISABLE,
  WARNA_UTAMA,
  WARNA_SEKUNDER,
  WARNA_WHITE,
  WARNA_GRAYTUA,
} from '../../utils/constant';
import {
  responsiveFontSize,
  responsiveHeight,
  responsiveWidth,
} from 'react-native-responsive-dimensions';
const ReviewRating = () => {
  const [data, setData] = useState([]);
  const [filteredData, setFilteredData] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState('');
  const [searchQuery, setSearchQuery] = useState('');

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      const response = await fetch(
        'http://192.168.1.3/homeii/web/api/v1/supplier-barang/index',
      );
      const json = await response.json();
      setData(json.data);
      setFilteredData(json.data);
    } catch (error) {
      console.error(error);
    }
  };

  const filterDataByCategory = category => {
    if (category === selectedCategory) {
      setSelectedCategory('');
      setFilteredData(data);
    } else {
      setSelectedCategory(category);
      const filtered = data.filter(item => item.nama_barang.includes(category));
      setFilteredData(filtered);
    }
  };

  const filterDataBySearchQuery = () => {
    if (searchQuery.trim() === '') {
      setFilteredData(data);
    } else {
      const filtered = data.filter(item =>
        item.nama_barang.toLowerCase().includes(searchQuery.toLowerCase()),
      );
      setFilteredData(filtered);
    }
  };

  const renderProductCard = ({item}) => {
    return (
      <TouchableOpacity style={styles.card}>
        <Image
          style={styles.image}
          source={require('../../assets/Images/batu.jpg')}
        />
        <Text style={styles.title}>{item.harga_proyek}</Text>
        <Text style={styles.price}>{item.nama_barang}</Text>
        <Text style={styles.stock}>{item.stok}</Text>
      </TouchableOpacity>
    );
  };

  const renderCategoryButton = category => {
    return (
      <TouchableOpacity
        key={category}
        style={[
          styles.categoryButton,
          selectedCategory === category && styles.selectedCategoryButton,
        ]}
        onPress={() => filterDataByCategory(category)}>
        <Text
          style={[
            styles.categoryButtonText,
            selectedCategory === category && styles.selectedCategoryButtonText,
          ]}>
          {category}
        </Text>
      </TouchableOpacity>
    );
  };

  return (
    <View style={styles.container}>
      <View style={styles.filterContainer}>
        <ScrollView horizontal showsHorizontalScrollIndicator={false}>
          {[
            'batu',
            'semen',
            'pasir',
            'keramik',
            'genteng',
            'besi',
            'steel',
            'bata',
          ].map(category => renderCategoryButton(category))}
        </ScrollView>
      </View>
      <View style={styles.searchContainer}>
        <TextInput
          style={styles.searchInput}
          placeholder="Search"
          value={searchQuery}
          placeholderTextColor={WARNA_DISABLE}
          onChangeText={text => setSearchQuery(text)}
          onSubmitEditing={filterDataBySearchQuery}
        />
        <TouchableOpacity
          style={styles.searchButton}
          onPress={filterDataBySearchQuery}>
          <Text style={styles.searchButtonText}>Search</Text>
        </TouchableOpacity>
      </View>
      <FlatList
        data={filteredData}
        renderItem={renderProductCard}
        keyExtractor={item => item.id.toString()}
        numColumns={2}
        columnWrapperStyle={styles.row}
      />
    </View>
  );
};
const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 10,
    // backgroundColor: '#F5F5F5',
  },
  searchContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    backgroundColor: 'gray',
  },
  searchInput: {
    height: 40,
    width: '80%',
    borderColor: '#CCCCCC',
    // borderWidth: 1,
    // borderRadius: 20,
    paddingLeft: 10,
    paddingRight: 10,
    // marginBottom: 10,
    color: 'black',
  },
  searchButton: {
    height: 40,
    width: '20%',
    backgroundColor: 'green',
    alignItems: 'center',
    justifyContent: 'center',
  },
  searchButtonText: {
    color: 'white',
  },
  // category: {
  //   borderWidth: 1,
  //   borderRadius: 5,
  //   backgroundColor: 'black',
  //   color: 'white',
  //   paddingHorizontal: responsiveHeight(2),
  //   paddingVertical: responsiveWidth(1),
  //   // paddingTop: responsiveHeight(5),
  //   marginVertical: responsiveHeight(2),
  //   marginHorizontal: responsiveWidth(1),
  //   textAlign: 'center',
  //   // fontSize: responsiveFontSize(2),
  //   // padding: 20,
  // },
  categoryButton: {
    // borderWidth: 1,
    backgroundColor: 'gray',
    paddingHorizontal: responsiveHeight(2),
    paddingVertical: responsiveWidth(2),
    borderRadius: 5,
    marginVertical: responsiveWidth(2),
    marginHorizontal: responsiveHeight(1),
  },
  selectedCategoryButton: {
    backgroundColor: 'red',
  },
  categoryButtonText: {
    color: 'White',
  },
  selectedCategoryButtonText: {
    color: 'white',
  },
  card: {
    flex: 1,
    backgroundColor: '#fff',
    borderRadius: 8,
    padding: 16,
    marginHorizontal: 8,
    marginBottom: 16,
    alignItems: 'center',
  },
  image: {
    width: 120,
    height: 120,
    marginBottom: 8,
  },
  title: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 8,
    color: 'red',
  },
  price: {
    fontSize: 14,
    color: 'green',
    marginBottom: 8,
  },
  stock: {
    fontSize: 12,
    color: 'gray',
  },
});
export default ReviewRating;
