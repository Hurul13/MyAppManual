import React, {useState, useEffect} from 'react';
import {
  View,
  StyleSheet,
  FlatList,
  Image,
  TouchableOpacity,
  ToastAndroid,
  RefreshControl,
} from 'react-native';
import {Button, Text} from 'native-base';
import styles from './Styles';
import NumericInput from 'react-native-numeric-input';
import Icon from 'react-native-vector-icons/FontAwesome';
import {url} from '../../utils/url';
import {
  responsiveFontSize,
  responsiveHeight,
  responsiveWidth,
} from 'react-native-responsive-dimensions';
import {
  WARNA_DISABLE,
  WARNA_GRAYTUA,
  WARNA_SEKUNDER,
  WARNA_UTAMA,
  WARNA_DEEPYELLOW,
  WARNA_WHITE,
  WARNA_BORDER,
} from '../../utils/constant';
import IconMaterial from 'react-native-vector-icons/MaterialCommunityIcons';
import AsyncStorage from '@react-native-async-storage/async-storage';
import CheckBox from '@react-native-community/checkbox';
import {Message} from '../../components';

const Keranjang5 = ({navigation}) => {
  const [selectedItems, setSelectedItems] = useState([]);
  const [cart, setCart] = useState([]);
  const [totalPrice, setTotalPrice] = useState(0);
  const [quantity, setQuantity] = useState(1);
  const [refreshing, setRefreshing] = useState(false);
  const [selectedSupplierIds, setSelectedSupplierIds] = useState([]);

  const onRefresh = () => {
    fetchData();
  };

  const fetchData = async () => {
    setRefreshing(true);
    try {
      const token = await AsyncStorage.getItem('token');

      const response = await fetch(`${url}supplier-barang/list-keranjang`, {
        method: 'GET',
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      if (response.ok) {
        const data = await response.json();

        // Update the cart items with the quantity from the NumericInput
        const updatedCart = data.data.map(item => {
          const existingCartItem = cart.find(
            cartItem => cartItem.id === item.id,
          );
          if (existingCartItem) {
            item.quantity = existingCartItem.quantity;
          }
          return item;
        });

        console.log(data);
        setCart(updatedCart);
      } else {
        console.log('Error fetching cart items');
      }
    } catch (error) {
      console.log('Error fetching cart items', error);
    } finally {
      setRefreshing(false);
    }
  };

  useEffect(() => {
    const fetchData = async () => {
      const updatedCart = await AsyncStorage.getItem('cart');
      if (updatedCart) {
        setCart(JSON.parse(updatedCart));
      }
    };

    fetchData();
  }, []);

  useEffect(() => {
    const saveData = async () => {
      try {
        await AsyncStorage.setItem('cart', JSON.stringify(cart));
      } catch (error) {
        console.log('Error saving cart data', error);
      }
    };

    saveData();
  }, [cart]);

  useEffect(() => {
    const price = cart.reduce(
      (acc, item) =>
        item.checked ? acc + item.harga_satuan * item.quantity : acc,
      0,
    );
    setTotalPrice(price);
  }, [cart]);

 const handleDelete = async (id, kode_unik, quantity) => {
  const newCart = cart.filter(item => item.id !== id);
  setCart(newCart);
  AsyncStorage.setItem('cart', JSON.stringify(newCart));

  const priceReduction = quantity * cart.find(item => item.id === id).harga_satuan;
  setTotalPrice(prevTotalPrice => prevTotalPrice - priceReduction);

  console.log(newCart, 'sukses delete');
  ToastAndroid.show('Berhasil hapus', ToastAndroid.SHORT);

  try {
    const token = await AsyncStorage.getItem('token');
    const response = await fetch(`${url}supplier-barang/hapus-keranjang?uniq=${kode_unik}`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${token}`,
      },
    });

    if (!response.ok) {
      console.log('Error deleting item from cart');
    }
  } catch (error) {
    console.log('Error deleting item from cart', error);
  }
};


 const handleToggleChecked = (id, checked, quantity, supplier_barang_id) => {
  const newCart = cart.map(item => {
    if (item.id === id) {
      item.checked = !checked;

      if (item.quantity > item.stok) {
        item.quantity = item.stok;
      }
    }
    return item;
  });

  setCart(newCart);
  console.log(newCart)
  AsyncStorage.setItem('cart', JSON.stringify(newCart));

  if (checked) {
    setSelectedSupplierIds(prevIds =>
      prevIds.filter(supplierId => supplierId !== supplier_barang_id),
    );
  } else {
    setSelectedSupplierIds(prevIds => [...prevIds, supplier_barang_id]);
  }
};


  const handleQuantityChange = async (kodeUnik, value) => {
  try {
    const updatedCart = cart.map(cartItem => {
      if (cartItem.kode_unik === kodeUnik) {
        const updatedQuantity = Math.max(1, value);
        cartItem.quantity = updatedQuantity;
      }
      return cartItem;
    });

    setCart(updatedCart);
    console.log(updatedCart)
    await AsyncStorage.setItem('cart', JSON.stringify(updatedCart));
  } catch (error) {
    console.error('Error updating quantity:', error);
  }
};


  // ...

  const renderItem = ({item}) => {
    return (
      <View style={[styles.card, styles.elevation]}>
        <View style={styles.spaceImg}>
          <Image source={{uri: item.gambar}} style={styles.img} />
        </View>
        <View style={styles.space1}>
          <View style={styles.textContainer}>
            <Text isTruncated style={styles.nama}>
              {item.nama_barang}
            </Text>
            <Text style={styles.harga}>Rp {item.harga_satuan}</Text>
            <View style={styles.space3}>
              <NumericInput
                value={item.quantity}
                onChange={value => {
                  const newCart = cart.map(cartItem => {
                    if (cartItem.id === item.id) {
                      const updatedQuantity = Math.max(1, value); // Ensure quantity is at least 1
                      handleQuantityChange(cartItem.kode_unik, updatedQuantity); // Call handleQuantityChange function
                      cartItem.quantity = updatedQuantity; // Update quantity in local state
                    }
                    return cartItem;
                  });
                  setCart(newCart);
                }}
                minValue={1}
                maxValue={item.stok}
                totalWidth={140}
                totalHeight={30}
                iconSize={25}
                step={1}
                rounded
                borderColor={WARNA_DEEPYELLOW}
                valueType="real"
                textColor={WARNA_SEKUNDER}
                iconStyle={{color: WARNA_SEKUNDER}}
                rightButtonBackgroundColor={WARNA_UTAMA}
                leftButtonBackgroundColor={WARNA_UTAMA}
                // initValue={1} // Add this prop to set the initial value to 1
              />

              <View style={styles.space2}>
                <View style={styles.checkbox}>
                  <TouchableOpacity
                    onPress={() =>
                      handleToggleChecked(
                        item.id,
                        item.checked,
                        item.quantity,
                        item.supplier_barang_id,
                      )
                    }>
                    {item.checked ? (
                      <Icon name="check-square-o" size={20} color="green" />
                    ) : (
                      <Icon name="square-o" size={20} color="grey" />
                    )}
                  </TouchableOpacity>
                </View>
                <TouchableOpacity
                  onPress={() => handleDelete(item.id, item.kode_unik)}
                  style={styles.deleteButton}>
                  <Icon name="trash" size={20} color="red" />
                </TouchableOpacity>
              </View>
            </View>
          </View>
        </View>
      </View>
    );
  };


const handleCheckout = async () => {
  const checkedItems = cart.filter(item => item.checked);
  const checkedSupplierIds = selectedSupplierIds;

  for (const supplierId of checkedSupplierIds) {
    try {
      const response = await fetch(`${url}supplier-barang/view?id=${supplierId}`);
      if (response.ok) {
        const data = await response.json();
        console.log('Supplier data:', data);
        // Process the response data as needed
      } else {
        console.log('Error fetching supplier data');
      }
    } catch (error) {
      console.log('Error fetching supplier data', error);
    }
  }

  const updatedCart = cart.filter(item => !checkedSupplierIds.includes(item.supplier_barang_id));
  setCart(updatedCart);
  AsyncStorage.setItem('cart', JSON.stringify(updatedCart));

  await AsyncStorage.setItem('checkedItems', JSON.stringify(checkedItems));
  await AsyncStorage.setItem('selectedSupplierIds', JSON.stringify(checkedSupplierIds));
  await AsyncStorage.setItem('totalPrice', JSON.stringify(totalPrice));

  ToastAndroid.show('Order', ToastAndroid.SHORT);
  navigation.navigate('TambahAlamat');

  for (const supplierId of checkedSupplierIds) {
    AsyncStorage.setItem('supplier_barang_id', supplierId.toString())
      .then(() => {
        console.log('Data supplier_barang_id disimpan');
      })
      .catch(error => {
        console.error('Terjadi kesalahan saat menyimpan data:', error);
      });
  }
};



  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity onPress={navigation.goBack}>
          <IconMaterial name="arrow-left" size={26} style={styles.iconBack} />
        </TouchableOpacity>
        <Text style={styles.judulBar}>Keranjang</Text>
      </View>
      <View style={styles.box}>
        <FlatList
          data={cart}
          renderItem={renderItem}
          keyExtractor={item => item.id.toString()}
          refreshControl={
            <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
          }
        />
        <View style={styles.bottom}>
          <View style={styles.bottomTotal}>
            <Text style={styles.totalHarga1}>Total Harga</Text>
            <Text style={styles.totalHarga}>Rp. {totalPrice}</Text>
          </View>
          <TouchableOpacity
            onPress={handleCheckout}
            style={styles.checkoutButton}>
            <Text style={styles.checkoutText}>CHECKOUT</Text>
          </TouchableOpacity>
        </View>
      </View>
    </View>
  );
};

export default Keranjang5;


code diatas halaman Keranjang5


import {
  View,
  TouchableOpacity,
  ToastAndroid,
  RefreshControl,
} from 'react-native';
import {
  Box,
  Pressable,
  Input,
  ScrollView,
  Text,
  VStack,
  FormControl,
} from 'native-base';
import React, { useEffect, useState } from 'react';
import styles from './Styles';
import IconMaterial from 'react-native-vector-icons/MaterialCommunityIcons';
import { Buttone } from '../../components';
import {
  responsiveHeight,
  responsiveWidth,
  responsiveFontSize,
} from 'react-native-responsive-dimensions';
import {
  WARNA_DISABLE,
  WARNA_UTAMA,
  WARNA_SEKUNDER,
  WARNA_WHITE,
  WARNA_GRAYTUA,
  WARNA_BORDER,
  WARNA_DEEPYELLOW,
  WARNA_BLACK,
  WARNA_RED,
  WARNA_BLUE,
} from '../../utils/constant';
import { url } from '../../utils/url';
import { useNavigation } from '@react-navigation/native';
import AsyncStorage from '@react-native-async-storage/async-storage';

const TambahAlamat= ({ navigation }) => {
  const navigateTo = async page => {
    navigation.navigate(page);
  };

  const [refreshing, setRefreshing] = useState(false);
  // const [addresses, setAddresses] = useState([]);
  const [addresses, setAddresses] = useState([]);

  // console.log('addresses:', addresses);

  const fetchAddresses = async () => {
    try {
      const user_id = await AsyncStorage.getItem('user_id');
      const token = await AsyncStorage.getItem('token');

      const response = await fetch(
        `${url}user-address/view-all?user_id=${user_id}`,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      const data = await response.json();

      if (response.ok) {
        setAddresses(data.data);
        await AsyncStorage.setItem('addresses', JSON.stringify(data.data));
        console.log('sukses', data);
      } else {
        console.log('Error fetching addresses:', data);
      }
    } catch (error) {
      console.error('Error fetching addresses:', error);
    }
  };


  useEffect(() => {
    const getSavedAddresses = async () => {
      const savedAddresses = await AsyncStorage.getItem('addresses');
      if (savedAddresses) {
        setAddresses(JSON.parse(savedAddresses));
      }
    };

    fetchAddresses();
    getSavedAddresses();
  }, []);


  const handleDelete = async (id) => {
    try {
      const token = await AsyncStorage.getItem('token');

      const response = await fetch(`${url}user-address/delete?id=${id}`, {
        method: 'DELETE',
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      const data = await response.json();

      if (response.ok) {
        ToastAndroid.show('Berhasil hapus alamat', ToastAndroid.SHORT);
        setAddresses(addresses.filter((address) => address.id !== id));

        // Remove the deleted address from AsyncStorage
        const savedAddresses = await AsyncStorage.getItem('addresses');
        if (savedAddresses) {
          const parsedAddresses = JSON.parse(savedAddresses);
          const updatedAddresses = parsedAddresses.filter(
            (address) => address.id !== id
          );
          await AsyncStorage.setItem(
            'addresses',
            JSON.stringify(updatedAddresses)
          );
        }
      } else {
        console.log('Error deleting address:', data);
      }
    } catch (error) {
      console.error('Error deleting address:', error);
    }
  };


  const onRefresh = async () => {
    setRefreshing(true);
    await fetchAddresses();
    setRefreshing(false);

    const savedAddresses = await AsyncStorage.getItem('addresses');
    if (savedAddresses) {
      setAddresses(JSON.parse(savedAddresses));
    }
  };


  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity onPress={navigation.goBack}>
          <IconMaterial name="arrow-left" size={26} style={styles.iconBack} />
        </TouchableOpacity>
        <Text style={styles.judulBar}>Alamat Profil</Text>
      </View>
      <View style={styles.box}>
        <ScrollView
          showsVerticalScrollIndicator={false}
          refreshControl={
            <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
          }>
          <Box mx={responsiveHeight(3)} mt={responsiveHeight(4)}>
            {addresses.map(address => (
              <TouchableOpacity
                key={address.id} // Add this line to set the key
                onPress={() => navigation.navigate('Checkout3', { address })}
              // onPress={() =>
              //   navigation.navigate('Checkout3', {
              //     id: address.id,
              //   })
              // }
              >
                <Box
                  borderWidth={0.6}
                  borderRadius={8}
                  borderColor={WARNA_BORDER}
                  shadow={0.9}
                  mb={3}
                  px={responsiveHeight(2)}
                  py={responsiveWidth(3)}>
                  <Box flexDirection={'row'} pb={1}>
                    <View
                      width={'75%'}
                      flexDirection={'row'}
                      alignItems={'center'}>
                      <Text
                        isTruncated
                        fontSize={responsiveFontSize(2.1)}
                        color={WARNA_SEKUNDER}
                        mr={2}
                        fontWeight={700}>
                        {address.nama_penerima}
                      </Text>
                      <Text
                        fontSize={responsiveFontSize(2.1)}
                        color={WARNA_SEKUNDER}
                        italic
                        borderLeftWidth={0.5}
                        borderColor={WARNA_DISABLE}
                        px={responsiveHeight(1)}>
                        {address.nomor_penerima}
                      </Text>
                    </View>
                    <View
                      style={{
                        flexDirection: 'row',
                      }}>
                      <IconMaterial
                        name="delete"
                        size={24}
                        style={{
                          padding: 8,
                          color: WARNA_RED,
                        }}
                        onPress={() => handleDelete(address.id)}
                      />
                      <IconMaterial
                        name="pencil"
                        size={24}
                        style={{
                          padding: 8,
                          color: WARNA_BLUE,
                        }}
                        onPress={() =>
                          navigation.navigate('UpdateAddress', {
                            id: address.id,
                          })
                        }
                      />
                    </View>
                  </Box>
                  <Text>{address.alamat_penerima}</Text>
                  <Text>
                    {address.provinsi_id}, {address.kota_id},{' '}
                    {address.kecamatan_id}, {address.desa_id},{' '}
                    {address.kode_pos}
                  </Text>
                </Box>
              </TouchableOpacity>
            ))}
            <TouchableOpacity
              style={{
                backgroundColor: WARNA_UTAMA,
                borderRadius: 50 / 2,
                padding: responsiveHeight(1.4),
                alignItems: 'center',
                marginVertical: responsiveWidth(4),
              }}
              onPress={() => navigation.navigate('NewAddress')}>
              <Text
                style={{
                  color: WARNA_BLACK,
                  fontSize: responsiveFontSize(2),
                  fontWeight: 'bold',
                  paddingVertical: responsiveWidth(0.7),
                }}>
                TAMBAH ALAMAT BARU
              </Text>
            </TouchableOpacity>
          </Box>
        </ScrollView>
      </View>
    </View>
  );
};

export default TambahAlamat;

code diatas halaman TambahAlamat


lalu buat code react native halaman Checkout3 dimana create order dengan menggunakan fetch api http://localhost:8000/homeii/web/api/v1/order-product/create-order?user_id=${user_id} (dimana untuk user_id mengambil data yang sudah tersimpan di AsyncStorage, begitu juga untuk tokennya). 
dimana nantinya create order ini akan menghasilkan data  seperti  data dibawah ketika tes di postman. 
"data": {
        "orders": [
            {
                "id": 145,
                "user_id": 79682614,
                "user_address_id": 1,
                "supplier_barang_id": 8,
                "jumlah": 1,
                "harga_satuan": 100000,
                "subtotal": 100000,
                "created_by": 79682614,
                "created_at": "2023-06-08 18:14:01",
                "updated_by": 79682614,
                "updated_at": "2023-06-09 12:07:06",
                "deleted_by": null,
                "deleted_at": "2023-06-08 18:14:01",
                "invoice_id": 151,
                "invoice_code": "HOMEIif81a-VhyC_wPmwTVNb-h0wp7",
                "payment_id": 2,
                "status": null,
                "status_pesanan": 0,
                "nama_barang": " Besi Beton Polos Full SNI 10mm - TP 280 (Bersertifikat)",
                "gambar": "http://localhost:8000/homeii/web/uploads/barang/vlq8H01iWayBh8A378GSwUZzVjeIADVH.PNG"
            },

dimana nantinya create order ini akan menghasilkan data  seperti  data dibawah didalam database nya.
id	user_id	user_address_id	supplier_barang_id	jumlah	harga_satuan	subtotal
153	79682619	3	8	1	100000	100000
148	79682614	1	22	2	70000	140000

jadi yang paling dibutuhkan dalam membuat halaman create order ini user_address_id (dari halaman TambahAlamat),	supplier_barang_id (ambil datanya dari halaman keranjang5), 	jumlah (ambil datanya dari halaman keranjang5),	harga_satuan (ambil datanya dari halaman keranjang5),	subtotal (ambil datanya dari halaman keranjang5, subtotal ini kalo dihalaman  keranjang5 itu total harga nya),

1. untuk data user_address_id	mengambil data user_address_id	 yang sudah tersimpan di halaman tambahAlamat diatas
2. untuk data supplier_barang_id,	jumlah,	harga_satuan,	subtotal (total harga) mengambil data yang sudah tersimpan dari halaman keranjang5 diatas yang akan di checkout
3. lalu menampilkan data card  dari user_address_id yang sama seperti hal nya tampilan card di halaman tambahAlamat diatas yang sudah tersimpan di AsyncStorage checkedItems sesuai dengan data yang checkout .
4. lalu menampilkan data card  dari supplier_barang_id,	jumlah,	harga_satuan,  yang sama seperti hal nya tampilan card halaman keranjang5 diatas sesuai yang akan di checkout
5. lalu menampilkan data  harga total dengan nama total pembayaran dari halaman keranjang5 diatas
6. lalu jika sukses post create order maka akan langsung ke halaman historyOrder
7. berikan style