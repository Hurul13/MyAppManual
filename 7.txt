// register, login, & logout (logout yg gagal)

// register

import React, {useState} from 'react';
import {
  StyleSheet,
  Text,
  View,
  TextInput,
  TouchableOpacity,
  Alert,
} from 'react-native';
import {WARNA_DISABLE} from '../../utils/constant';

const cobaRegister = ({navigation}) => {
  const [name, setName] = useState('');
  const [username, setUsername] = useState('');
  const [email, setEmail] = useState('');
  const [phone, setPhone] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);

  const registerUser = async () => {
    try {
      const response = await fetch(
        'http://192.168.1.3/homeii/web/api/v1/auth/register',
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            name,
            username,
            email,
            phone,
            password,
          }),
        },
      );

      const data = await response.json();
      console.log(data);

      if (response.status === 200) {
        Alert.alert('Success', 'Register Success', [
          {text: 'OK', onPress: () => navigation.navigate('cobaLogin')},
        ]);
      } else {
        Alert.alert('Failed', 'Register Failed');
      }
    } catch (error) {
      console.log(error);
      Alert.alert('Error', 'An error occurred');
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Register</Text>
      <TextInput
        style={styles.input}
        placeholder="Name"
        placeholderTextColor={WARNA_DISABLE}
        value={name}
        onChangeText={text => setName(text)}
      />
      <TextInput
        style={styles.input}
        placeholder="Username"
        placeholderTextColor={WARNA_DISABLE}
        value={username}
        onChangeText={text => setUsername(text)}
      />
      <TextInput
        style={styles.input}
        placeholder="Email"
        placeholderTextColor={WARNA_DISABLE}
        value={email}
        onChangeText={text => setEmail(text)}
      />
      <TextInput
        style={styles.input}
        placeholder="Phone"
        placeholderTextColor={WARNA_DISABLE}
        value={phone}
        onChangeText={text => setPhone(text)}
      />
      <View style={styles.passwordContainer}>
        <TextInput
          style={styles.passwordInput}
          placeholder="Password"
          placeholderTextColor={WARNA_DISABLE}
          value={password}
          secureTextEntry={!showPassword}
          onChangeText={text => setPassword(text)}
        />
        <TouchableOpacity
          style={styles.passwordVisibilityButton}
          onPress={() => setShowPassword(!showPassword)}>
          {showPassword ? (
            <Text style={styles.passwordVisibilityButtonText}>Hide</Text>
          ) : (
            <Text style={styles.passwordVisibilityButtonText}>Show</Text>
          )}
        </TouchableOpacity>
      </View>
      <TouchableOpacity style={styles.registerButton} onPress={registerUser}>
        <Text style={styles.registerButtonText}>Register</Text>
      </TouchableOpacity>
      <TouchableOpacity onPress={() => navigation.navigate('cobaLogin')}>
        <Text style={styles.loginButtonText}>
          Already have an account? Login
        </Text>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: '#ffffff',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
    color: 'black',
    textAlign: 'center',
  },
  input: {
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 5,
    paddingVertical: 10,
    paddingHorizontal: 15,
    marginVertical: 10,
    color: 'black',
  },
  passwordContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 5,
    paddingVertical: 10,
    paddingHorizontal: 15,
    marginVertical: 10,
  },
  passwordInput: {
    color: 'black',
    flex: 1,
  },
  passwordVisibility: {
    color: '#2e78b7',
  },
  passwordVisibilityButton: {
    marginLeft: 10,
    padding: 5,
    borderWidth: 1,
    backgroundColor: 'black',
  },
  passwordVisibilityButtonText: {
    fontSize: 16,
    color: 'white',
  },
  registerButton: {
    backgroundColor: 'green',
    borderRadius: 100 / 2,
    paddingVertical: 10,
  },
  registerButtonText: {
    color: 'white',
    fontSize: 24,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  // forgotPasswordButton: {
  //   backgroundColor: 'gray',
  //   marginVertical: 3,
  //   // width:
  // },
  // forgotPasswordButtonText: {
  //   color: 'gray',
  //   textAlign: 'right',
  //   marginBottom: 10,
  // },
  loginButtonText: {
    color: 'black',
    textAlign: 'center',
    marginVertical: 10,
  },
});

export default cobaRegister;

// login

import React, {useState} from 'react';
import {
  StyleSheet,
  Text,
  View,
  TextInput,
  TouchableOpacity,
  Alert,
} from 'react-native';
import {WARNA_DISABLE} from '../../utils/constant';

const cobaLogin = ({navigation}) => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);

  const loginUser = async () => {
    try {
      const response = await fetch(
        'http://192.168.1.3/homeii/web/api/v1/auth/login',
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            username,
            password,
          }),
        },
      );

      const data = await response.json();
      console.log(data);

      if (response.status === 200) {
        Alert.alert('Success', 'Login Success', [
          {text: 'OK', onPress: () => navigation.navigate('cobaLogout')},
        ]);
      } else {
        Alert.alert('Failed', 'Invalid username or password');
      }
    } catch (error) {
      console.log(error);
      Alert.alert('Error', 'An error occurred');
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Login</Text>
      <TextInput
        style={styles.input}
        placeholderTextColor={WARNA_DISABLE}
        placeholder="Username"
        value={username}
        onChangeText={text => setUsername(text)}
      />
      <View style={styles.passwordContainer}>
        <TextInput
          style={styles.passwordInput}
          placeholderTextColor={WARNA_DISABLE}
          placeholder="Password"
          value={password}
          secureTextEntry={!showPassword}
          onChangeText={text => setPassword(text)}
        />
        <TouchableOpacity
          style={styles.passwordVisibilityButton}
          onPress={() => setShowPassword(!showPassword)}>
          {showPassword ? (
            <Text style={styles.passwordVisibilityButton}>Hide</Text>
          ) : (
            <Text style={styles.passwordVisibilityButton}>Show</Text>
          )}
        </TouchableOpacity>
      </View>
      <TouchableOpacity style={styles.loginButton} onPress={loginUser}>
        <Text style={styles.loginButtonText}>Login</Text>
      </TouchableOpacity>
      <TouchableOpacity onPress={() => navigation.navigate('ForgotPassword')}>
        <Text style={styles.forgotPasswordButtonText}>Forgot Password?</Text>
      </TouchableOpacity>
      <TouchableOpacity onPress={() => navigation.navigate('cobaRegister')}>
        <Text style={styles.registerButtonText}>
          Don't have an account? Register
        </Text>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: '#ffffff',
    // alignItems: 'center',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
    color: 'black',
    textAlign: 'center',
  },
  input: {
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 5,
    paddingVertical: 10,
    paddingHorizontal: 15,
    color: 'black',
    marginVertical: 10,
  },
  passwordContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 5,
    paddingVertical: 10,
    paddingHorizontal: 15,
    marginVertical: 10,
  },
  passwordInput: {
    color: 'black',
    flex: 1,
  },
  passwordVisibility: {
    color: '#2e78b7',
  },
  passwordVisibilityButton: {
    marginLeft: 10,
    padding: 5,
    borderWidth: 1,
    backgroundColor: 'black',
  },
  passwordVisibilityButtonText: {
    fontSize: 16,
    color: 'white',
  },
  loginButton: {
    backgroundColor: 'green',
    borderRadius: 100 / 2,
    paddingVertical: 10,
  },
  loginButtonText: {
    color: 'white',
    fontSize: 24,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  // forgotPasswordButton: {
  //   backgroundColor: 'gray',
  //   marginVertical: 3,
  //   // width:
  // },
  forgotPasswordButtonText: {
    color: 'gray',
    textAlign: 'right',
    marginBottom: 10,
  },
  registerButtonText: {
    color: 'black',
    textAlign: 'center',
    marginVertical: 10,
  },
});

export default cobaLogin;


// logout

import React, {useState} from 'react';
import {StyleSheet, View, Text, TouchableOpacity, Alert} from 'react-native';

const cobaLogout = ({navigation}) => {
  const [isLoading, setIsLoading] = useState(false);

  const handleLogout = async () => {
    setIsLoading(true);
    try {
      const token =
        'BASICAPPMTY4MzQraWJyRVMrcFhlZTd0ZVZ2_U9yKR_MWczaXgtakxaS3RXa250Kzk2MDI4APP';
      const response = await fetch(
        'http://192.168.1.3/homeii/web/api/v1/auth/logout',
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${token}`,
          },
        },
      );
      const responseData = await response.json();
      setIsLoading(false);
      if (responseData.status === 'success') {
        Alert.alert('Logout berhasil');
        navigation.navigate('cobaLogin'); // kembali ke halaman Login setelah Logout berhasil
      } else {
        Alert.alert('Logout gagal');
      }
    } catch (error) {
      setIsLoading(false);
      console.error(error);
      Alert.alert('Terjadi kesalahan saat melakukan Logout');
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Logout</Text>
      <TouchableOpacity style={styles.button} onPress={handleLogout}>
        <Text style={styles.buttonText}>Logout</Text>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
    color: 'black',
  },
  button: {
    backgroundColor: '#007AFF',
    padding: 10,
    borderRadius: 5,
  },
  buttonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
});

export default cobaLogout;
